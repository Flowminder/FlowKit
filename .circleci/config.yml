version: 2.1

defaults:
  - &base_docker
    - image: circleci/python:3.7
      environment:
        FLOWDB_PORT: 5432
        MPLBACKEND: "agg"
  - &flowdb_env
    FLOWDB_PORT: 9000
    ORACLE_DB_PORT: 9002
    SYNTHETIC_DATA_DB_PORT: 5432
    FLOWDB_DATA_DIR: /home/circleci/database_data
    FLOWDB_INGESTION_DIR: /home/circleci/project/flowdb/tests/data
    POSTGRES_PASSWORD: flowflow
    POSTGRES_USER: flowdb
    FLOWMACHINE_FLOWDB_USER: flowmachine
    FLOWAPI_FLOWDB_USER: flowapi
    FLOWMACHINE_FLOWDB_PASSWORD: foo
    FLOWAPI_FLOWDB_PASSWORD: foo
  - &wait_for_flowdb
    name: Wait for flowdb to start
    command: |
      dockerize -wait tcp://localhost:5432 -timeout 10m
  - &run_always_org_context
    context: org-global
    filters:
      tags:
        only: /.*/
      branches:
        ignore: gh-pages
  - &master_only_org_context
    context: org-global
    filters:
      branches:
        only: master
  - &tag_only_org_context
    context: org-global
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /.*/


executors:
  python_with_flowdb: # Synthetic data generation execution environment
    parameters:
      flowdb_image:
        type: enum
        enum: ["synthetic-data", "testdata"]
        default: "testdata"
      synthetic_data_generator:
        type: enum
        enum: ["python", "sql"]
        default: "python"
      num_days:
        type: integer
        default: 3
      num_subscribers:
        type: integer
        default: 400
      num_cells:
        type: integer
        default: 100
      num_sites:
        type: integer
        default: 100
      num_sms:
        type: integer
        default: 0
      num_calls:
        type: integer
        default: 2000
      num_tacs:
        type: integer
        default: 1000
      num_mds:
        type: integer
        default: 0
      disaster_start_date:
        type: string
        default: "2015-01-01"
      disaster_end_date:
        type: string
        default: "2015-01-01"
    environment:
        POSTGRES_PASSWORD: flowflow
        MPLBACKEND: "agg"
        FLOWDB_PORT: 5432
        FLOWMACHINE_FLOWDB_PASSWORD: foo
        FLOWAPI_FLOWDB_PASSWORD: foo
        FLOWAPI_FLOWDB_USER: flowapi
        REDIS_PASSWORD: fm_redis
        SYNTHETIC_DATA_DB_PORT: 5432
        POSTGRES_USER: flowdb
        REDIS_HOST: "localhost"
        QUART_APP: "flowapi.main:create_app()"
        FLOWMACHINE_FLOWDB_USER: flowmachine
        LOG_DIRECTORY: "."
        FLOWMACHINE_HOST: localhost
        FLOWMACHINE_PORT: 5555
        FLOWDB_HOST: localhost
        JWT_SECRET_KEY: secret
    docker:
      - image: circleci/python:3.7
      - image: flowminder/flowdb-<<parameters.flowdb_image>>:$CIRCLE_SHA1
        environment:
          N_DAYS: <<parameters.num_days>>
          DISASTER_START_DATE: <<parameters.disaster_start_date>>
          DISASTER_END_DATE: <<parameters.disaster_end_date>>
          N_SUBSCRIBERS: <<parameters.num_subscribers>>
          N_CELLS: <<parameters.num_cells>>
          N_SITES: <<parameters.num_sites>>
          N_SMS: <<parameters.num_sms>>
          N_MDS: <<parameters.num_mds>>
          N_CALLS: <<parameters.num_calls>>
          N_TACS: <<parameters.num_tacs>>
          SYNTHETIC_DATA_GENERATOR: <<parameters.synthetic_data_generator>>
          FLOWMACHINE_FLOWDB_PASSWORD: foo
          FLOWAPI_FLOWDB_PASSWORD: foo
          POSTGRES_PASSWORD: flowflow
          SUBSCRIBERS_SEED: 12345
          CALLS_SEED: 22222
          CELLS_SEED: 99999
          OUTPUT_ROOT_DIR: "/docker-entrypoint-initdb.d"
      - image: bitnami/redis:latest
        environment:
          REDIS_PASSWORD: "fm_redis"

jobs:
  set_docker_tag_for_ci_images:
    docker: *base_docker
    steps:
      - run:
          name: Set a common docker tag
          command: |
            echo "export SAFE_TAG=${CIRCLE_TAG:-$(echo -n $CIRCLE_BRANCH | md5sum | cut -d" " -f1)}"| tee -a $BASH_ENV /home/circleci/.env
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - .env

  build_flowetl:
    machine:
      image: circleci/classic:201808-01
    working_directory: /home/circleci/project
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/
      - run:
          name: Log in to docker cloud
          command: echo $DOCKER_CLOUD_PASSWORD | docker login --username $DOCKER_CLOUD_USER --password-stdin
      - run:
          name: Build image
          command: |
            source /home/circleci/.env 
            echo Tagging as $SAFE_TAG and $CIRCLE_SHA1
            # docker pull flowminder/flowetl:latest && export BUILD_CACHE_TAG=latest || true
            # docker pull flowminder/flowetl:$SAFE_TAG && export BUILD_CACHE_TAG=$SAFE_TAG || true
            echo Using cache from $BUILD_CACHE_TAG
            docker build -t flowminder/flowetl:$SAFE_TAG -t flowminder/flowetl:$CIRCLE_SHA1 flowetl
            # docker build --cache-from flowminder/flowetl:$BUILD_CACHE_TAG -t flowminder/flowetl:$SAFE_TAG -t flowminder/flowetl:$CIRCLE_SHA1 flowetl
      - run:
          name: Test that can start with specified UID/GID
          command: |
            source /home/circleci/.env 
            expecteduser=1003
            expectedgroup=1002
            gotuser=`docker run --user ${expecteduser}:${expectedgroup} flowminder/flowetl:${SAFE_TAG} bash -c 'id -u'`
            gotgroup=`docker run --user ${expecteduser}:${expectedgroup} flowminder/flowetl:${SAFE_TAG} bash -c 'id -g'`
            if [ $gotuser -ne $expecteduser -a  $gotgroup -ne $expectedgroup ]; then
                 exit 1
            else
               echo "running as correct user and group"
            fi
      - run:
          name: Push image to Docker cloud
          command: |
            source /home/circleci/.env 
            docker push flowminder/flowetl:${SAFE_TAG}
            docker push flowminder/flowetl:${CIRCLE_SHA1}        

  build_flowdb:
    machine:
      image: circleci/classic:201808-01
    working_directory: /home/circleci/project
    environment: *flowdb_env
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/
      - restore_cache:
          key: flowdb-deps-1-{{ checksum "flowdb/Pipfile.lock"}}
      - run:
          name: "Switch to Python v3.7"
          command: |
            pyenv versions
            pyenv global 3.7.0
      - run:
          name: Install pipenv
          command: pip install --upgrade pip pipenv
      - run:
          name: Install python dependencies
          command: |
            PIPENV_PIPFILE=flowdb/Pipfile pipenv install --deploy --dev
      - save_cache:
          key: flowdb-deps-1-{{ checksum "flowdb/Pipfile.lock" }}
          paths:
            - /home/circleci/.local/share/virtualenvs/flowdb-NgQ6vyXW
      - run:
          name: Set additional environment variables
          command: |
            cat /home/circleci/.env >> $BASH_ENV
            echo "export FLOWDB_VERSION=$(git describe --tags --always)" | tee -a $BASH_ENV /home/circleci/.env
            echo 'export TAG_PREFIXES=(""  "testdata-" "synthetic-data-")' | tee -a $BASH_ENV /home/circleci/.env
            echo "export FLOWDB_RELEASE_DATE=$(git show -s --date=short-local --pretty=format:%cd -n1)"| tee -a $BASH_ENV /home/circleci/.env
      - run:
          name: Log in to docker cloud
          command: echo $DOCKER_CLOUD_PASSWORD | docker login --username $DOCKER_CLOUD_USER --password-stdin
      - run:
          name: Build main image
          command: |
            echo Building version $FLOWDB_VERSION
            echo Tagging as $SAFE_TAG and $CIRCLE_SHA1
            docker pull flowminder/flowdb:latest && export BUILD_CACHE_TAG=latest || true
            docker pull flowminder/flowdb:$SAFE_TAG && export BUILD_CACHE_TAG=$SAFE_TAG || true
            echo Using cache from $BUILD_CACHE_TAG
            docker build --cache-from flowminder/flowdb:$BUILD_CACHE_TAG --build-arg FLOWDB_VERSION=$FLOWDB_VERSION \
              --build-arg FLOWDB_RELEASE_DATE=$FLOWDB_RELEASE_DATE -t flowminder/flowdb:$SAFE_TAG -t flowminder/flowdb:$CIRCLE_SHA1 flowdb
      - run:
          name: Build testdata image
          command: |
            echo Building testdata version $FLOWDB_VERSION
            echo Tagging as testdata-$SAFE_TAG and testdata-$CIRCLE_SHA1
            docker build --build-arg CODE_VERSION=$SAFE_TAG -t flowminder/flowdb-testdata:$SAFE_TAG -t flowminder/flowdb-testdata:$CIRCLE_SHA1 \
            flowdb/testdata
            touch .testdata-build-done
          background: true
      - run:
          name: Build image with Oracle
          command: |
            echo Building Oracle_fdw version $FLOWDB_VERSION
            echo Tagging as oracle-$SAFE_TAG
            docker build --build-arg CODE_VERSION=$SAFE_TAG --build-arg ORACLE_BINARY_SOURCE=https://raw.githubusercontent.com/bumpx/oracle-instantclient/master \
             -t flowminder/flowdb:oracle-$SAFE_TAG flowdb/oracle_fdw
            touch .oracle-build-done
          background: true
      - run:
          name: Build synthetic data image
          command: |
            echo Building synthetic testdata version $FLOWDB_VERSION.
            echo Tagging as synthetic-data-$SAFE_TAG synthetic-data-$CIRCLE_SHA1
            docker build --build-arg CODE_VERSION=$SAFE_TAG -t flowminder/flowdb-synthetic-data:$SAFE_TAG -t flowminder/flowdb-synthetic-data:$CIRCLE_SHA1 \
              -f flowdb/testdata/Dockerfile.synthetic_data flowdb/testdata
            touch .synthetic-data-build-done
          background: true
      - run:
         name: Test that not providing a superuser password causes the container to exit
         command: |
           if docker run -e FLOWMACHINE_FLOWDB_PASSWORD=foo -e FLOWAPI_FLOWDB_PASSWORD=foo flowminder/flowdb:$SAFE_TAG; then
               exit 1
           else
               echo "Correctly failed with no superuser password"
           fi
      - run:
          name: Create data dir
          command: |
            mkdir $FLOWDB_DATA_DIR
      - run:
          name: Wait for container builds to complete
          command: |
            while [ ! -f ".synthetic-data-build-done" ] || [ ! -f ".oracle-build-done" ] || [ ! -f ".testdata-build-done" ]; do
              echo "Waiting for docker image builds to complete"
            done
      - run:
          name: Test that a data generator must be set for synth data
          command: |
            if docker run -e FLOWMACHINE_FLOWDB_PASSWORD=foo -e FLOWAPI_FLOWDB_PASSWORD=foo -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD flowminder/flowdb-synthetic-data:$SAFE_TAG; then
                exit 1
            else
                echo "Correctly failed with no data generator selected"
            fi
      - run:
          name: Launch flowdb
          command: |
            docker run --name flowdb --publish $FLOWDB_PORT:5432 --user $(id -u):$(id -g) --shm-size=1G --volume=${FLOWDB_DATA_DIR}:/var/lib/postgresql/data \
              --volume=${FLOWDB_INGESTION_DIR}:/ingestion:ro -e FLOWMACHINE_FLOWDB_PASSWORD=foo -e FLOWAPI_FLOWDB_PASSWORD=foo \
              -e MAX_CPUS=2 -e MAX_WORKERS=2 -e MAX_WORKERS_PER_GATHER=2 \
              -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
              --detach flowminder/flowdb:$SAFE_TAG

            echo "Waiting for flowdb to be ready.."
            docker run --name flowdb_oracle --shm-size=1G --publish $ORACLE_DB_PORT:5432 -e FLOWMACHINE_FLOWDB_PASSWORD=foo -e FLOWAPI_FLOWDB_PASSWORD=foo \
            -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
             --detach flowminder/flowdb:oracle-$SAFE_TAG
            docker exec flowdb bash -c 'i=0;until [ $i -ge 24 ] || (pg_isready -h 127.0.0.1 -p 5432 -U flowdb);do let i=i+1; echo Waiting 10s; sleep 10;done'
            echo "Waiting for flowdb with oracle_fdw to be ready.."
            docker exec flowdb_oracle bash -c 'i=0;until [ $i -ge 24 ] || (pg_isready -h 127.0.0.1 -p 5432);do let i=i+1; echo Waiting 10s; sleep 10;done'
            docker ps -a
            docker images -a
      - run:
          name: Run tests
          command: cd flowdb && pipenv run pytest --junit-xml=test_results/pytest/results.xml --ignore=tests/test_synthetic_data.py
      - store_test_results:
          path: flowdb/test_results
      - run:
          name: FlowDB Docker logs
          command: docker logs flowdb
          when: on_fail
      - run:
          name: FlowDB-oracle Docker logs
          command: docker logs flowdb_oracle
          when: on_fail
      - run:
          name: Push images to Docker cloud
          command: |
            docker push flowminder/flowdb:${SAFE_TAG}
            docker push flowminder/flowdb:${CIRCLE_SHA1}

            docker push flowminder/flowdb-testdata:${SAFE_TAG}
            docker push flowminder/flowdb-testdata:${CIRCLE_SHA1}

            docker push flowminder/flowdb-synthetic-data:${SAFE_TAG}
            docker push flowminder/flowdb-synthetic-data:${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - .env

  install_flowmachine_deps:
    docker: *base_docker
    working_directory: /home/circleci/project
    steps:
      - checkout
      - restore_cache:
          key: flowmachine-deps-1-{{ checksum "flowmachine/Pipfile.lock" }}
      - run: cd flowmachine && pipenv install --dev --deploy && pipenv run pip install -e .
      - save_cache:
          key: flowmachine-deps-1-{{ checksum "flowmachine/Pipfile.lock" }}
          paths:
            - /home/circleci/.local/share/virtualenvs/flowmachine-caaCcVrN

  lint:
    docker: *base_docker
    working_directory: /home/circleci/project
    steps:
      - checkout
      - restore_cache:
          key: flowmachine-deps-1-{{ checksum "flowmachine/Pipfile.lock" }}
      - run:
          name: Linting files with black
          command: PIPENV_PIPFILE=flowmachine/Pipfile pipenv run black --check .

  run_flowmachine_tests:
    executor:
      name: python_with_flowdb
      flowdb_image: "testdata"
    working_directory: /home/circleci/project/flowmachine
    steps:
      - checkout:
          path: /home/circleci/project/
      - attach_workspace:
          at: /home/circleci/
      - restore_cache:
          key: flowmachine-deps-1-{{ checksum "Pipfile.lock" }}
      - run: *wait_for_flowdb
      - run:
          name: Run tests
          command: |
            pipenv run pytest \
                      --junit-xml=test_results/pytest/results.xml \
                      --cov flowmachine/ \
                      --cov-report xml \
                      --cov-report term \
                      --durations=10
      - store_test_results:
          path: test_results
      - run:
          name: Upload coverage
          command: bash <(curl -s https://codecov.io/bash)
          when: always

  run_flowdbsynth_tests:
    parameters:
      synthetic_data_generator:
        type: enum
        enum: ["python", "sql"]
        default: "python"
    executor:
      name: python_with_flowdb
      flowdb_image: "synthetic-data"
      synthetic_data_generator: <<parameters.synthetic_data_generator>>
    working_directory: /home/circleci/project/flowdb
    steps:
      - checkout:
          path: /home/circleci/project/
      - run:
          name: install deps
          command: pipenv install --dev --deploy
      - run: *wait_for_flowdb
      - run:
          name: Run tests
          command: pipenv run pytest --junit-xml=test_results/pytest/results.xml tests/test_synthetic_data.py
      - store_test_results:
          path: test_results

  run_flowkit_api_tests:
    docker:
      - image: circleci/python:3.7
    working_directory: /home/circleci/project/flowapi
    steps:
      - checkout:
          path: /home/circleci/project/
      - run: pipenv install --deploy --dev
      - run:
          name: Run API unit tests
          command: |
            pipenv run python -m pytest --junitxml=test_results/pytest/results.xml --cov=flowapi/ \
             --cov-report term --cov-report xml --durations=10
      - store_test_results:
          path: test_results
      - run: bash <(curl -s https://codecov.io/bash)

  run_flowauth_backend_tests:
    docker:
      - image: circleci/python:3.6
    environment:
      FERNET_KEY: "XU-J5xNOtkaUKAoqWT7_VoT3zk2OTuoqKPBN3l0pOFg="
      FLASK_APP: flowauth
    working_directory: /home/circleci/project/flowauth
    steps:
      - checkout:
          path: /home/circleci/project/
      - run: pipenv install --deploy --dev
      - run:
          name: Run backend unit tests
          command: |
            pipenv run pytest --junitxml=test_results/pytest/results.xml --cov=backend/flowauth/ \
             --cov-report term --cov-report xml --durations=10
      - store_test_results:
          path: test_results
      - run: bash <(curl -s https://codecov.io/bash)

  run_flowauth_frontend_tests:
    docker:
      - image: circleci/python:3.6
    environment:
      FERNET_KEY: "XU-J5xNOtkaUKAoqWT7_VoT3zk2OTuoqKPBN3l0pOFg="
      FLASK_APP: flowauth
    working_directory: /home/circleci/project/flowauth
    steps:
      - checkout:
          path: /home/circleci/project/
      - run:
          name: Install cypress dependencies
          command: sudo apt-get install -y xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2
      - restore_cache:
          key: flowkit-flowauth-frontend-deps2-{{ checksum "Pipfile.lock" }}-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install NPM
          command: |
            curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - run:
          name: Cypress setup
          command: |
            cd frontend
            npm ci
            npm run cy:verify
      - run: pipenv install --deploy --dev
      - save_cache:
          key: flowkit-flowauth-frontend-deps2-{{ checksum "Pipfile.lock" }}-{{ checksum "frontend/package-lock.json" }}
          paths:
            - /home/circleci/.local/share/virtualenvs/
            - /home/circleci/project/flowauth/frontend/node_modules
      - run:
          name: Run Cypress end-to-end tests
          command: pipenv run test-frontend --reporter junit --reporter-options "mochaFile=../results/flowauth-frontend.xml"
      - store_test_results:
          path: results


  run_flowclient_tests:
    docker:
      - image: circleci/python:3.7
    working_directory: /home/circleci/project/flowclient
    steps:
      - checkout:
          path: /home/circleci/project/
      - run: pipenv install --deploy --dev && pipenv run pip install -e .
      - run:
          name: Run API client unit tests
          command: |
            pipenv run pytest --junitxml=test_results/pytest/results.xml --cov=flowclient/ \
            --cov-report term --cov-report xml --durations=10
      - store_test_results:
          path: test_results
      - run: bash <(curl -s https://codecov.io/bash)

  build_docker_image:
    parameters:
      component:
        type: enum
        enum: ["flowmachine", "flowauth", "flowapi"]
    docker:
      - image: circleci/python:3.7
    working_directory: /home/circleci/project/
    steps:
      - checkout:
          path: /home/circleci/project/
      - attach_workspace:
          at: /home/circleci
      - setup_remote_docker
      - run:
          name: Log in to docker cloud
          command: docker login --username $DOCKER_CLOUD_USER --password $DOCKER_CLOUD_PASSWORD
      - run:
          name: Build <<parameters.component>> image
          command: |
            echo "Tagging as $CIRCLE_SHA1"
            docker build -t flowminder/<<parameters.component>>:$CIRCLE_SHA1 ./<<parameters.component>>
      - run:
          name: Push images to Docker cloud
          command: |
            docker push flowminder/<<parameters.component>>:$CIRCLE_SHA1

  integration_tests:
    executor:
      name: python_with_flowdb
      flowdb_image: "testdata"
    working_directory: /home/circleci/project/integration_tests
    steps:
      - checkout:
          path: /home/circleci/project/
      - attach_workspace:
          at: /home/circleci
      - run: *wait_for_flowdb
      - run:
          name: Run integration tests
          command: |
            PIPENV_DONT_LOAD_ENV=1 FLOWAPI_PORT=9090 pipenv run run-tests -sv --junitxml=test_results/pytest/results.xml --durations=10 \
            --cov=../flowmachine --cov=../flowclient --cov=../flowapi \
            --cov-report xml \
            --cov-report term
      - store_test_results:
          path: test_results
      - run: bash <(curl -s https://codecov.io/bash)

  test_quickstart:
    machine:
      image: circleci/classic:201808-01
    working_directory: /home/circleci/project
    environment:
      BRANCH: $CIRCLE_BRANCH
    steps:
      - checkout:
          path: /home/circleci/project/
      - run: ./quick_start.sh
      - run: ./quick_start.sh stop

  build_docs:
    parameters:
      deploy:
        type: boolean
        default: false
    executor:
      name: python_with_flowdb
      flowdb_image: "synthetic-data"
      synthetic_data_generator: sql
      num_sites: 200
      num_cells: 1000
      num_subscribers: 50000
      num_days: 60
      num_calls: 20000
      num_sms: 20000
      num_tacs: 10000
      num_mds: 20000
      disaster_start_date: 2016-02-11
      disaster_end_date: 2016-03-01
    working_directory: /home/circleci/project/docs
    steps:
      - checkout:
          path: /home/circleci/project/
      - attach_workspace:
          at: /home/circleci/
      - restore_cache:
          key: flowkit-docs-deps1-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install pandoc
          command: |
            wget https://github.com/jgm/pandoc/releases/download/1.19.2.1/pandoc-1.19.2.1-1-amd64.deb
            sudo dpkg -i pandoc-1.19.2.1-1-amd64.deb
      - run: pipenv install
      - run: *wait_for_flowdb
      - when:
          condition: << parameters.deploy >>
          steps:
            - run:
                name: Mkdocs Deploy
                # We set PIPENV_DONT_LOAD_ENV here to use env vars provided by circle, rather than in the
                # .env for local build usage
                command: |
                  PIPENV_DONT_LOAD_ENV=1 pipenv run deploy
      - unless:
          condition: << parameters.deploy >>
          steps:
            - run:
                name: Mkdocs Build
                # We set PIPENV_DONT_LOAD_ENV here to use env vars provided by circle, rather than in the
                # .env for local build usage
                command: |
                  PIPENV_DONT_LOAD_ENV=1 pipenv run build
                  zip -r flowkit-docs.zip flowkit-docs/*
            - store_artifacts:
                path: /home/circleci/project/docs/flowkit-docs.zip
                destination: docs
      - save_cache:
          key: flowkit-docs-deps1-{{ checksum "Pipfile.lock" }}
          paths:
            - /home/circleci/.local/share/virtualenvs/


  build_python_wheel:
    parameters:
      project_name:
        type: string
    docker: *base_docker
    working_directory: /home/circleci/project/<<parameters.project_name>>
    steps:
      - checkout:
          path: /home/circleci/project/
      - run:
          name: Building wheel for <<parameters.project_name>>
          command: python setup.py bdist_wheel
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - <<parameters.project_name>>/dist
      - store_artifacts:
          path: /home/circleci/project/<<parameters.project_name>>/dist
          destination: wheel

  push_wheel:
    parameters:
      project_name:
        type: string
    docker: *base_docker
    steps:
      - attach_workspace:
          at: /home/circleci/
      - run:
          name: Upload <<parameters.project_name>> Wheel
          command: |
            pipenv install twine
            pipenv run twine upload /home/circleci/<<parameters.project_name>>/dist/*

  retag_images:
    parameters:
      tag:
        type: string
        default: "latest"
    docker:
      - image: circleci/python:3.7
    steps:
      - run:
          name: Install retagger
          command: wget -q https://github.com/joshdk/docker-retag/releases/download/0.0.2/docker-retag && sudo install docker-retag /usr/bin
      - run:
          name: Retag
          command: |
            export DOCKER_USER=$DOCKER_CLOUD_USER
            export DOCKER_PASS=$DOCKER_CLOUD_PASSWORD
            for IMAGE in flowapi flowmachine flowdb flowdb-synthetic-data flowdb-testdata flowauth flowetl; do
              docker-retag flowminder/$IMAGE:$CIRCLE_SHA1 ${<< parameters.tag >>:-latest}
            done





workflows:
  run_build_pipeline:
    jobs:
      - set_docker_tag_for_ci_images:
          <<: *run_always_org_context
      - build_flowdb:
          requires:
            - set_docker_tag_for_ci_images
          <<: *run_always_org_context
      - build_flowetl:
          requires:
            - set_docker_tag_for_ci_images
          <<: *run_always_org_context
      - install_flowmachine_deps:
          <<: *run_always_org_context
      - run_flowkit_api_tests:
          <<: *run_always_org_context
      - run_flowclient_tests:
          <<: *run_always_org_context
      - run_flowauth_backend_tests:
          <<: *run_always_org_context
      - run_flowauth_frontend_tests:
          <<: *run_always_org_context
      - lint:
          requires:
            - install_flowmachine_deps
          <<: *run_always_org_context
      - run_flowmachine_tests:
          requires:
            - build_flowdb
            - install_flowmachine_deps
          <<: *run_always_org_context
      - run_flowdbsynth_tests:
          name: Synth data python generator
          synthetic_data_generator: python
          requires:
            - build_flowdb
          <<: *run_always_org_context
      - run_flowdbsynth_tests:
          name: Synth data sql generator
          synthetic_data_generator: sql
          requires:
            - build_flowdb
          <<: *run_always_org_context
      - build_docker_image:
          name: build_flowmachine
          component: flowmachine
          requires:
            - run_flowmachine_tests
          <<: *run_always_org_context
      - build_docs:
          name: build_docs
          requires:
            - install_flowmachine_deps
            - build_flowdb
          <<: *run_always_org_context
      - build_docker_image:
          name: build_flowauth
          component: flowauth
          requires:
            - run_flowauth_backend_tests
            - run_flowauth_frontend_tests
          <<: *run_always_org_context
      - build_docker_image:
          name: build_flowapi
          component: flowapi
          requires:
            - run_flowkit_api_tests
          <<: *run_always_org_context
      - build_python_wheel:
          name: build_flowclient_wheel
          project_name: flowclient
          requires:
            - run_flowclient_tests
            - integration_tests
          <<: *run_always_org_context
      - build_python_wheel:
          name: build_flowmachine_wheel
          project_name: flowmachine
          requires:
            - run_flowmachine_tests
            - integration_tests
          <<: *run_always_org_context
      - test_quickstart:
          requires:
            - build_flowdb
            - build_flowapi
            - build_flowmachine
            - build_flowauth
          <<: *run_always_org_context
      - integration_tests:
          requires:
            - install_flowmachine_deps
            - build_flowdb
          <<: *run_always_org_context
      - retag_images:
          name: retag_master_branch
          requires:
            - test_quickstart
            - build_docs
          <<: *master_only_org_context
      - retag_images:
          name: retag_tagged_build
          requires:
            - test_quickstart
            - build_docs
          tag: CIRCLE_TAG
          <<: *tag_only_org_context
      - push_wheel:
          name: push_flowclient_wheel
          project_name: flowclient
          requires:
            - build_flowclient_wheel
          <<: *tag_only_org_context
      - push_wheel:
          name: push_flowmachine_wheel
          project_name: flowmachine
          requires:
            - build_flowmachine_wheel
          <<: *tag_only_org_context
      - build_docs:
          name: Deploy docs
          deploy: true
          requires:
            - build_docs
            - retag_tagged_build
            - push_flowclient_wheel
          <<: *tag_only_org_context
