# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""empty message

Revision ID: 976c731ff30f
Revises: 73ea696e203d
Create Date: 2024-03-26 13:10:55.045768

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import structlog

# revision identifiers, used by Alembic.
revision = "976c731ff30f"
down_revision = "73ea696e203d"
branch_labels = None
depends_on = None
logger = structlog.get_logger("flowauth.migration")


def upgrade():
    logger.info(
        "Running upgrade.",
        migration_script=__file__,
        revision=revision,
        down_revision=down_revision,
        branch_labels=branch_labels,
        depends_on=depends_on,
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=75), nullable=False),
        sa.Column("server_id", sa.Integer(), nullable=True),
        sa.Column("latest_token_expiry", sa.DateTime(), nullable=False),
        sa.Column("longest_token_life_minutes", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "server_id"),
    )
    op.create_table(
        "scope",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=512), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=True),
        sa.Column("server_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "server_id"),
    )
    op.create_table(
        "token_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=75), nullable=False),
        sa.Column("_token", sa.Text(), nullable=False),
        sa.Column("expiry", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("server_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scopes_in_role",
        sa.Column("scope_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["scope_id"],
            ["scope.id"],
        ),
        sa.PrimaryKeyConstraint("scope_id", "role_id"),
    )
    op.create_table(
        "users_with_roles",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    op.drop_table("group_server_permission")
    op.drop_table("server_capability")
    op.drop_table("group_server_token_limits")
    op.drop_table("group_memberships")
    op.drop_table("group")
    op.drop_table("token")

    with op.batch_alter_table("server", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("longest_token_life_minutes", sa.Integer(), nullable=False)
        )
        batch_op.drop_column("longest_token_life")

    # ### end Alembic commands ###


def downgrade():
    logger.info(
        "Running downgrade.",
        migration_script=__file__,
        revision=revision,
        down_revision=down_revision,
        branch_labels=branch_labels,
        depends_on=depends_on,
    )
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("server", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "longest_token_life", sa.INTEGER(), autoincrement=False, nullable=False
            )
        )
        batch_op.drop_column("longest_token_life_minutes")

    op.create_table(
        "group_server_permission",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "server_capability_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["group.id"], name="group_server_permission_group_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["server_capability_id"],
            ["server_capability.id"],
            name="group_server_permission_server_capability_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="group_server_permission_pkey"),
        sa.UniqueConstraint(
            "group_id", "server_capability_id", name="_group_servercap_uc"
        ),
    )
    op.create_table(
        "group",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('group_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=75), autoincrement=False, nullable=False),
        sa.Column("user_group", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="group_pkey"),
        sa.UniqueConstraint("name", name="group_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "token",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=75), autoincrement=False, nullable=False),
        sa.Column("_token", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "expires", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("server_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], name="token_owner_id_fkey"),
        sa.ForeignKeyConstraint(
            ["server_id"], ["server.id"], name="token_server_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="token_pkey"),
    )
    op.create_table(
        "server_capability",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("server_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("capability", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "capability_hash",
            sa.VARCHAR(length=32),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("enabled", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["server_id"], ["server.id"], name="server_capability_server_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="server_capability_pkey"),
        sa.UniqueConstraint("server_id", "capability_hash", name="_server_cap_uc"),
    )
    op.create_table(
        "group_memberships",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"], ["group.id"], name="group_memberships_group_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="group_memberships_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("user_id", "group_id", name="group_memberships_pkey"),
    )
    op.create_table(
        "group_server_token_limits",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "latest_end", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("longest_life", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("server_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"], ["group.id"], name="group_server_token_limits_group_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
            name="group_server_token_limits_server_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="group_server_token_limits_pkey"),
        sa.UniqueConstraint("group_id", "server_id", name="_group_server_limits_uc"),
    )
    op.drop_table("users_with_roles")
    op.drop_table("scopes_in_role")
    op.drop_table("token_history")
    op.drop_table("scope")
    op.drop_table("role")
    # ### end Alembic commands ###
