"""empty message

Revision ID: 73ea696e203d
Revises: 
Create Date: 2024-03-26 13:07:58.023590

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "73ea696e203d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "group",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=75), nullable=False),
        sa.Column("user_group", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "server",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=75), nullable=False),
        sa.Column("latest_token_expiry", sa.DateTime(), nullable=False),
        sa.Column("longest_token_life", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("username", sa.String(length=75), nullable=False),
        sa.Column("_password", sa.Text(), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=True),
        sa.Column("require_two_factor", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "group_memberships",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "group_id"),
    )
    op.create_table(
        "group_server_token_limits",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("latest_end", sa.DateTime(), nullable=False),
        sa.Column("longest_life", sa.Integer(), nullable=False),
        sa.Column("server_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("group_id", "server_id", name="_group_server_limits_uc"),
    )
    op.create_table(
        "server_capability",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("server_id", sa.Integer(), nullable=False),
        sa.Column("capability", sa.Text(), nullable=False),
        sa.Column("capability_hash", sa.String(length=32), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("server_id", "capability_hash", name="_server_cap_uc"),
    )
    op.create_table(
        "token",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=75), nullable=False),
        sa.Column("_token", sa.Text(), nullable=False),
        sa.Column("expires", sa.DateTime(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("server_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["server_id"],
            ["server.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "two_factor_auth",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("_secret_key", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "group_server_permission",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("server_capability_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["server_capability_id"],
            ["server_capability.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "group_id", "server_capability_id", name="_group_servercap_uc"
        ),
    )
    op.create_table(
        "two_factor_backup",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("auth_id", sa.Integer(), nullable=False),
        sa.Column("_backup_code", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["auth_id"],
            ["two_factor_auth.user_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("two_factor_backup")
    op.drop_table("group_server_permission")
    op.drop_table("two_factor_auth")
    op.drop_table("token")
    op.drop_table("server_capability")
    op.drop_table("group_server_token_limits")
    op.drop_table("group_memberships")
    op.drop_table("user")
    op.drop_table("server")
    op.drop_table("group")
    # ### end Alembic commands ###
